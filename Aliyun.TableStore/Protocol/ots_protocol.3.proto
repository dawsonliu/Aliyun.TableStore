syntax = "proto3";

package Wicture.Aliyun.TableStore.Protocol;

message Error {
    string code = 1;
    string message = 2;
}

enum ColumnType {
    INF_MIN = 0; // only for GetRange 
    INF_MAX = 1; // only for GetRange
    INTEGER = 2;
    STRING = 3;
    BOOLEAN = 4;
    DOUBLE = 5;
    BINARY = 6; 
}

message ColumnSchema {
    string name = 1;
    ColumnType type = 2;
}

message ColumnValue {
    ColumnType type = 1;
    int64 v_int = 2;
    string v_string = 3;
    bool v_bool = 4;
    double v_double = 5;
    bytes v_binary = 6; 
}

message Column {
    string name = 1;
    ColumnValue value = 2;
}

message Row {
    repeated Column primary_key_columns = 1;
    repeated Column attribute_columns = 2;
}

message TableMeta {
    string table_name = 1;
    repeated ColumnSchema primary_key = 2;
}

enum RowExistenceExpectation {
    IGNORE = 0;
    EXPECT_EXIST = 1;
    EXPECT_NOT_EXIST = 2;
}

enum ColumnConditionType {
    CCT_NONE						 = 0;
    CCT_RELATION                 = 1;
    CCT_COMPOSITE                = 2;
}

enum ComparatorType {
    CT_NONE						= 0;
    CT_EQUAL                    = 1;
    CT_NOT_EQUAL                = 2;
    CT_GREATER_THAN             = 3;
    CT_GREATER_EQUAL            = 4;
    CT_LESS_THAN                = 5;
    CT_LESS_EQUAL               = 6;
}

message RelationCondition {
    ComparatorType comparator     = 1;
    string column_name            = 2;
    ColumnValue column_value      = 3;
    bool pass_if_missing          = 4;
}

enum LogicalOperator {
    LO_NONE						= 0;
    LO_NOT                      = 1;
    LO_AND                      = 2;
    LO_OR                       = 3;
}

message CompositeCondition {
    LogicalOperator combinator     = 1;
    repeated ColumnCondition sub_conditions = 2;
}

message ColumnCondition {
    ColumnConditionType type    = 1;
    bytes condition = 2;  // Serialized bytes of column condition of the type
}

message Condition {
    RowExistenceExpectation row_existence = 1;
    ColumnCondition column_condition      = 2;
}

message CapacityUnit {
    int32 read = 1;
    int32 write = 2;
}

message ReservedThroughputDetails {
    CapacityUnit capacity_unit = 1;
    int64 last_increase_time = 2;
    int64 last_decrease_time = 3;
    int32 number_of_decreases_today = 4;
}

message ReservedThroughput {
    CapacityUnit capacity_unit = 1;
}

message ConsumedCapacity {
    CapacityUnit capacity_unit = 1;
}

/* CreateTable */
message CreateTableRequest {
    TableMeta table_meta = 1;
    ReservedThroughput reserved_throughput = 2;
}

message CreateTableResponse {
}

/* UpdateTable */

message UpdateTableRequest {
    string table_name = 1;
    ReservedThroughput reserved_throughput = 2; 
}

message UpdateTableResponse {
    ReservedThroughputDetails reserved_throughput_details = 1;
}

/* DescribeTable */
message DescribeTableRequest {
    string table_name = 1;
}

message DescribeTableResponse {
    TableMeta table_meta = 1;
    ReservedThroughputDetails reserved_throughput_details = 2;
}

/* ListTable */
message ListTableRequest {
}

message ListTableResponse {
    repeated string table_names = 1;
}

/* DeleteTable */
message DeleteTableRequest {
    string table_name = 1;
}

message DeleteTableResponse {
}

/* GetRow */
message GetRowRequest {
    string table_name = 1;
    repeated Column primary_key = 2;
    repeated string columns_to_get = 3;
    ColumnCondition filter = 4;
}

message GetRowResponse {
    ConsumedCapacity consumed = 1;
    Row row = 2;
}

/* UpdateRow */
enum OperationType {
    NONE = 0;
    PUT = 1;
    DELETE = 2;
}

message ColumnUpdate {
    OperationType type = 1;
    string name = 2;
    ColumnValue value = 3;
}

message UpdateRowRequest {
    string table_name = 1;
    Condition condition = 2;
    repeated Column primary_key = 3;
    repeated ColumnUpdate attribute_columns = 4; 
}

message UpdateRowResponse {
    ConsumedCapacity consumed = 1;
}

/* PutRow */
message PutRowRequest {
    string table_name = 1;
    Condition condition = 2;
    repeated Column primary_key = 3;
    repeated Column attribute_columns = 4; 
}

message PutRowResponse {
    ConsumedCapacity consumed = 1;
}

/* DeleteRow */
message DeleteRowRequest {
    string table_name = 1;
    Condition condition = 2;
    repeated Column primary_key = 3;
}

message DeleteRowResponse {
    ConsumedCapacity consumed = 1;
}

/* BatchGetRow */
message RowInBatchGetRowRequest {
    repeated Column primary_key = 1;
}

message TableInBatchGetRowRequest {
    string table_name = 1;
    repeated RowInBatchGetRowRequest rows = 2;
    repeated string columns_to_get = 3;
    ColumnCondition filter = 4;
}

message BatchGetRowRequest {
    repeated TableInBatchGetRowRequest tables = 1;
}

message RowInBatchGetRowResponse {
    bool is_ok = 1;
    Error error = 2;
    ConsumedCapacity consumed = 3;
    Row row = 4;
}

message TableInBatchGetRowResponse {
    string table_name = 1;
    repeated RowInBatchGetRowResponse rows = 2; // same indices w.r.t. request
}

message BatchGetRowResponse {
    repeated TableInBatchGetRowResponse tables = 1; // same indices w.r.t. request
}

/* BatchWriteRow */
message PutRowInBatchWriteRowRequest {
    Condition condition = 1;
    repeated Column primary_key = 2;
    repeated Column attribute_columns = 3; 
}

message UpdateRowInBatchWriteRowRequest {
    Condition condition = 1;
    repeated Column primary_key = 2;
    repeated ColumnUpdate attribute_columns = 3; 
}

message DeleteRowInBatchWriteRowRequest {
    Condition condition = 1;
    repeated Column primary_key = 2;
}

message TableInBatchWriteRowRequest {
    string table_name = 1;
    repeated PutRowInBatchWriteRowRequest put_rows = 2;
    repeated UpdateRowInBatchWriteRowRequest update_rows = 3;
    repeated DeleteRowInBatchWriteRowRequest delete_rows = 4;
}

message BatchWriteRowRequest {
    repeated TableInBatchWriteRowRequest tables = 1; // same indices w.r.t. request
}

message RowInBatchWriteRowResponse {
    bool is_ok = 1;
    Error error = 2;
    ConsumedCapacity consumed = 3;
}

message TableInBatchWriteRowResponse {
    string table_name = 1;
    repeated RowInBatchWriteRowResponse put_rows = 2; // same indices w.r.t. request
    repeated RowInBatchWriteRowResponse update_rows = 3; // same indices w.r.t. request
    repeated RowInBatchWriteRowResponse delete_rows = 4; // same indices w.r.t. request
}

message BatchWriteRowResponse {
    repeated TableInBatchWriteRowResponse tables = 1;
}

/* GetRange */
enum Direction {
    FORWARD = 0;
    BACKWARD = 1;
}

message GetRangeRequest {
    string table_name = 1;
    Direction direction = 2;
    repeated string columns_to_get = 3;
    int32 limit = 4;
    repeated Column inclusive_start_primary_key = 5; // all PKs, possibly filled with INF_MIN/INF_MAX
    repeated Column exclusive_end_primary_key = 6; // all PKs, possibly filled with INF_MIN/INF_MAX
    ColumnCondition filter = 7;
}

message GetRangeResponse {
    ConsumedCapacity consumed = 1;
    repeated Column next_start_primary_key = 2; // missing means hitting the end
    repeated Row rows = 3;
}